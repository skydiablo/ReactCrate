<?php

namespace SkyDiablo\ReactCrate\Doctrine\DBAL\Driver;

use Doctrine\DBAL\Connection;
use Doctrine\DBAL\Platforms\PostgreSQLPlatform;
use Doctrine\DBAL\Schema\PostgreSQLSchemaManager;
use Doctrine\DBAL\Types\Type;
use SkyDiablo\ReactCrate\Doctrine\DBAL\Types\TypeRegistry;

/**
 * Platform for CrateDB, based on PostgreSQL platform due to similarities.
 */
class CratePlatform extends PostgreSQLPlatform
{
    public function __construct() {
        parent::__construct();
        TypeRegistry::registerTypes();
    }


    public function createSchemaManager(Connection $connection): PostgreSQLSchemaManager
    {
        return new CrateSchemaManager($connection, $this);
    }

    public function registerDoctrineTypeMapping(string $dbType, string $doctrineType): void
    {
        parent::registerDoctrineTypeMapping($dbType, $doctrineType); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritDoc}
     */
    protected function initializeDoctrineTypeMappings(): void
    {

        parent::initializeDoctrineTypeMappings();

        // Map PostgreSQL array types that CrateDB might expose to their base types
        $this->doctrineTypeMapping['_json'] = 'json';
        $this->doctrineTypeMapping['_jsonb'] = 'json';
        $this->doctrineTypeMapping['_text'] = 'text';
        $this->doctrineTypeMapping['_varchar'] = 'string';
        $this->doctrineTypeMapping['_int4'] = 'integer';
        $this->doctrineTypeMapping['_int8'] = 'bigint';
        $this->doctrineTypeMapping['_float8'] = 'float';
        
        // CrateDB-specific types
        $this->doctrineTypeMapping['point'] = 'string';  // geo_point as string
        $this->doctrineTypeMapping['geo_point'] = 'string';
        $this->doctrineTypeMapping['geo_shape'] = 'text';
        $this->doctrineTypeMapping['ip'] = 'string';
        $this->doctrineTypeMapping['float_vector'] = 'json';  // float_vector as JSON array
        
        // Map timestamp types to our custom CrateDB datetime type
        $this->doctrineTypeMapping['timestamp'] = 'crate_datetime';
        $this->doctrineTypeMapping['timestamptz'] = 'crate_datetime';
        $this->doctrineTypeMapping['timestamp with time zone'] = 'crate_datetime';
        $this->doctrineTypeMapping['timestamp without time zone'] = 'crate_datetime';
    }

    /**
     * {@inheritDoc}
     */
    public function getDateTimeTypeDeclarationSQL(array $column): string
    {
        return 'TIMESTAMP';
    }

    /**
     * {@inheritDoc}
     */
    public function getDateTimeTzTypeDeclarationSQL(array $column): string
    {
        return 'TIMESTAMP';
    }

    /**
     * {@inheritDoc}
     */
    public function getTimeTypeDeclarationSQL(array $column): string
    {
        return 'TIMESTAMP';
    }

    /**
     * {@inheritDoc}
     */
    public function getDateTypeDeclarationSQL(array $column): string
    {
        return 'TIMESTAMP';
    }

    /**
     * {@inheritDoc}
     */
    public function getDecimalTypeDeclarationSQL(array $column): string
    {
        return 'DOUBLE';
    }

    /**
     * {@inheritDoc}
     */
    public function getFloatDeclarationSQL(array $column): string
    {
        return 'DOUBLE';
    }

    /**
     * {@inheritDoc}
     */
    public function getListSequencesSQL(string $database): string
    {
        // CrateDB doesn't support sequences, return empty result
        return "SELECT '' as sequence_name, '' as schema_name, 0 as min_value, 1 as increment_by WHERE 1=0";
    }

    /**
     * {@inheritDoc}
     */
    public function getListTableConstraintsSQL(string $table): string
    {
        // CrateDB doesn't support constraints in the same way as PostgreSQL
        return "SELECT '' as constraint_name, '' as constraint_type WHERE 1=0";
    }

    /**
     * {@inheritDoc}
     */
    public function getListTableIndexesSQL(string $table, ?string $database = null): string
    {
        // CrateDB doesn't support indexes in the same way as PostgreSQL
        return "SELECT '' as index_name, '' as index_type WHERE 1=0";
    }

}
